<?php

namespace SamIT\AutoUpdater\Package;
/**
 * An update package contains data the client uses for an upgrade.
 */
class Update extends Base {
    protected $precheck;
    
    protected $basePath;
    
    protected $changedFiles = [];
    protected $createdFiles = [];
    protected $targetHashes = [];
    
    protected $hash;
    
    
    
    /**
     * Runs the update package.
     * This runs the pre-checks and a live upgrade.
     */
    public function run() {
     
        
        die('noo');
//        $results = array_merge(
//            $this->simulateDelete(),
//            $this->simulateUpdate(),
//            $this->simulateCreate()
//        );
//        return $results;
    }
    
    
    /**
     * Gets the SHA1 hash for the zip file generated by this package.
     * @param booelan $throw Set to false to not throw an exception.
     * @return string
     * @throws \Exception
     */
    public function getHash($throw = true) {
        if (!isset($this->hash) && $throw) {
            throw new \Exception("Save the build before trying to get its hash.");
        }
        return $this->hash;
    }
    
    protected function createZipFile($fileName) {
        // We include created and changed file.
        $zip = new \ZipArchive();
        $zip->open($fileName, \ZipArchive::CREATE);
        
        foreach ($this->changedFiles as $changedFile) {
            $zip->addFile("{$this->basePath}/$changedFile", $changedFile);            
        }
        foreach ($this->createdFiles as $createdFile) {
            $zip->addFile("{$this->basePath}/$createdFile", $createdFile);            
        }
        $zip->close();
        // Verify.
        var_dump($zip->open($fileName, \ZipArchive::CHECKCONS));
        $count = $zip->numFiles;
        for ($i = 0; $i < $count; $i++) {
            $targetHash = $this->targetHashes[$zip->getNameIndex($i)];
            $hash = $this->gitHash($zip->getFromIndex($i));
            if ($targetHash != $hash) {
                var_dump($zip->getNameIndex($i));
//                var_dump($zip->getFromIndex($i));
                echo "Got: $hash\n";
                echo "Exp: $targetHash\n";
//                var_dump();
                
//                throw new \Exception("incorrect hash during verification.");
            }
        }
        $zip->close();
        $this->hash = $this->gitHash(file_get_contents($fileName));
        
        
    }
    
    protected function gitHash($string) {
        return sha1("blob " . strlen($string) . chr(0). $string);
    }
    public function saveToFile($fileName) {
        return $this->createZipFile($fileName);
    }

}